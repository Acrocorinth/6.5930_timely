{{include_text('defines.yaml')}}

architecture:
  # ============================================================
  # Architecture Description
  # ============================================================
  nodes: &macro # Top-level is hierarchical
  # - !Container # Top-level system
  #   name: system

  - !Container # Timely accelerator
    name: timely
    <<<: [*container_defaults]
    attributes:
      technology: TECHNOLOGY

  - !Container
    name: subchip
    <<<: [*container_defaults]
    spatial: {meshX: NUM_CHIPS}
  
  # - !Component
  #   name: input_buffer
  #   <<<: [*component_defaults, *keep_inputs]
  #   subclass: smartbuffer_SRAM
  #   attributes: {width: 8, depth: 2048}

  # - !Component
  #   name: output_buffer
  #   <<<: [*component_defaults, *keep_outputs]
  #   subclass: smartbuffer_SRAM
  #   attributes: {width: 8, depth: 2048}

  - !Container
    name: crossbar_column
    <<<: [*container_defaults]
    spatial: {meshX: NUM_CB_X}

  - !Component # Column readout (ADC)
    name: tdc
    <<<: [*component_defaults, *keep_outputs, *no_coalesce]
    subclass: timely_tdc
    attributes: {width: ENCODED_OUTPUT_BITS, <<<: *cim_component_attributes}
    
  # - !Component # Column readout (ADC)
  #   name: column_drivers
  #   <<<: [*component_defaults, *keep_outputs, *no_coalesce]
  #   subclass: column_drivers
  #   attributes: {width: ENCODED_OUTPUT_BITS, <<<: *cim_component_attributes}

  - !Component # Integrator + comparator
    name: integrate_compare
    <<<: [*component_defaults, *keep_outputs, *no_coalesce]
    subclass: timely_charging_comparator
    attributes: {width: 1, <<<: *cim_component_attributes}

  - !Component 
    name: iadder
    <<<: [*component_defaults, *keep_outputs, *no_temporal_reuse]
    subclass: timely_iadder
    attributes: {width: 1, <<<: *cim_component_attributes}

  - !Container
    name: crossbar_row
    <<<: [*container_defaults]
    spatial: {meshY: NUM_CB_Y}
    
  - !Component # Column readout (ADC)
    name: pSubBufs # P-SubBufs
    <<<: [*component_defaults, *keep_outputs, *no_coalesce]
    subclass: timely_psubbuf
    attributes: {width: 1, <<<: *cim_component_attributes}

  - !Component # DAC parts
    name: dtc
    <<<: [*component_defaults, *keep_inputs, *no_temporal_reuse]
    subclass: timely_dtc
    attributes: {width: DAC_RESOLUTION, <<<: *cim_component_attributes}

  # - !Component # Row drivers feed inputs onto the rows of the array
  #   name: row_drivers
  #   <<<: [*component_defaults, *keep_inputs, *no_coalesce]
  #   subclass: input_row_drivers
  #   attributes: {width: DAC_RESOLUTION, <<: *cim_component_attributes, temporal_spiking: true}

  - !Component
    name: xSubBufs
    <<<: [*component_defaults, *keep_inputs, *temporal_reuse]
    subclass: timely_xsubbuf
    attributes: {width: 1, depth: INF, <<: *cim_component_attributes}

  - !ArrayContainer # Each column stores a different weight slice. Columns share inputs.
    name: column
    <<<: [*container_defaults, *spatial_must_reuse_inputs]
    spatial: {meshX: ARRAY_BITLINES}
    constraints: {spatial: {maximize_dims: [Y, M]}}
    max_utilization: {spatial: {factors: [('M=' + str(column.get_fanout()))]}}

  - !ArrayContainer # Each row receives a different input. Rows share outputs.
    name: row
    <<<: [*container_defaults, *spatial_must_reuse_outputs]
    spatial: {meshY: ARRAY_WORDLINES}
    constraints: {spatial: {maximize_dims: [C, R, S]}}
    max_utilization: {spatial: {factors: [('C=' + str(row.get_fanout()))]}}

  - !Component # CiM unit stores weights and computes MACs. Defined in include/defines.yaml.
    <<<: *cim_unit 

  - !Hierarchical           # Virtualize an XxYxZ-bit MAC as multiple MAC units.
    nodes: *virtualized_mac # Defined in include/defines.yaml.